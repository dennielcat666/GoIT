{"version":3,"sources":["../src/model.js"],"names":["Model","data","self","addItem","item","length","push","removeItem","index","indexOf","splice","editItem","newValue"],"mappings":";;;;;;;AACO,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAA+B;AACvD,MAAIC,IAAI,GAAG,IAAX,CADwB,CACoB;;AAC5CA,EAAAA,IAAI,CAACD,IAAL,GAAYA,IAAZ,CAFwB,CAEoB;;AAE5CC,EAAAA,IAAI,CAACC,OAAL,GAAe,UAAUC,IAAV,EAAgB;AAAa;AACxC,QAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AAAiB;AACA;AAEpC,aAHmB,CAGiB;AACvC;;AAEDH,IAAAA,IAAI,CAACD,IAAL,CAAUK,IAAV,CAAeF,IAAf,EAP2B,CAOa;;AACxC,WAAOF,IAAI,CAACD,IAAZ,CAR2B,CAQa;AAC3C,GATD;;AAUAC,EAAAA,IAAI,CAACK,UAAL,GAAkB,UAAUH,IAAV,EAAgB;AAAU;AACxC,QAAII,KAAK,GAAGN,IAAI,CAACD,IAAL,CAAUQ,OAAV,CAAmBL,IAAnB,CAAZ,CAD8B,CACU;AACA;AACA;;AAExC,QAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAAsB;AACpC,aADc,CACsB;AACvC;;AAEDN,IAAAA,IAAI,CAACD,IAAL,CAAUS,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB,EAT8B,CASU;;AACxC,WAAON,IAAI,CAACD,IAAZ;AACH,GAXD;;AAaAC,EAAAA,IAAI,CAACS,QAAL,GAAgB,UAAUP,IAAV,EAAgBQ,QAAhB,EAA0B;AAAa;AACnD,QAAIJ,KAAK,GAAGN,IAAI,CAACD,IAAL,CAAUQ,OAAV,CAAkBL,IAAlB,CAAZ,CADsC,CACC;AACC;AACA;;AAExC,QAAII,KAAK,KAAK,CAAC,CAAf,EAAkB;AAAsB;AACpC,aADc,CACsB;AACvC;;AAEDN,IAAAA,IAAI,CAACD,IAAL,CAAUO,KAAV,IAAmBI,QAAnB;AACA,WAAOV,IAAI,CAACD,IAAZ;AACH,GAXD;AAYH","sourcesContent":["\r\nexport function Model(data) {                              //данные и работа с данными\r\n    var self = this;                            //конструктор класса\r\n    self.data = data;                           //массив (['test 1', 'test 2', 'test 3'])\r\n\r\n    self.addItem = function (item) {            //добавление нового элемента в список\r\n        if (item.length === 0) {                //проверка на корректность введенных данных\r\n                                                //если пришла пустая строка (length === 0)...\r\n            \r\n            return;                             //...просто делем возврат\r\n        }\r\n        \r\n        self.data.push(item);                   //добавление элемента в массив (в список)\r\n        return self.data;                       //возвращаем обнавленные данные\r\n    };\r\n    self.removeItem = function (item) {         //удаление элемента из списка\r\n        var index = self.data.indexOf (item);   //js будет искать совпадение строк. если придет например \r\n                                                //test 2, то js будет идти по элементам масства, искать совпадения\r\n                                                //и если найдет совпадение, вернет индекс\r\n        \r\n        if (index === -1) {                     //если индекс не найден...\r\n            return;                             //...делаем возврат\r\n        }\r\n\r\n        self.data.splice(index, 1);             //\"удаляем\" элемент из массива (схлопываем на 1)                                             \r\n        return self.data;\r\n    }\r\n\r\n    self.editItem = function (item, newValue) {            //редактирование элемента списка\r\n        var index = self.data.indexOf(item);   //js будет искать совпадение строк. если придет например \r\n                                                //test 2, то js будет идти по элементам масства, искать совпадения\r\n                                                //и если найдет совпадение, вернет индекс\r\n        \r\n        if (index === -1) {                     //если индекс не найден...\r\n            return;                             //...делаем возврат\r\n        }\r\n\r\n        self.data[index] = newValue;\r\n        return self.data;\r\n    }\r\n}\r\n\r\n\r\n"],"file":"model.js"}